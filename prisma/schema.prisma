generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model articles {
  id_article Int        @id @default(autoincrement())
  nom        String?    @db.VarChar(50)
  acheter    Boolean?
  contiens   contiens[]
}

model contiens {
  id_liste   Int
  id_article Int
  qte        Int?     @default(1)
  articles   articles @relation(fields: [id_article], references: [id_article], onDelete: Cascade, onUpdate: NoAction, map: "id_article")
  listes     listes   @relation(fields: [id_liste], references: [id_liste], onDelete: Cascade, onUpdate: NoAction, map: "id_liste")

  @@id([id_liste, id_article])
  @@index([id_article], map: "id_article_idx")
  @@index([id_liste], map: "list")
}

model listes {
  id_liste          Int           @id @default(autoincrement())
  nom               String?       @db.VarChar(50)
  date_creation     DateTime?     @db.DateTime(0)
  date_modification DateTime?     @db.DateTime(0)
  createur          Int?
  modificateur      Int?
  publique          Int?          @default(0) @db.TinyInt
  uuid              String?       @db.Char(36)
  contiens          contiens[]
  invitations       invitations[]
  possede           possede[]

  @@index([uuid], map: "uuid")
}

model possede {
  id_utilisateur Int
  id_liste       Int
  listes         listes       @relation(fields: [id_liste], references: [id_liste], onDelete: NoAction, onUpdate: NoAction, map: "id_listes")
  utilisateurs   utilisateurs @relation(fields: [id_utilisateur], references: [id_utilisateur], onDelete: NoAction, onUpdate: NoAction, map: "id_utilisateur")

  @@id([id_utilisateur, id_liste])
  @@index([id_liste], map: "id_liste_idx")
}

model utilisateurs {
  id_utilisateur               Int       @id @default(autoincrement())
  nom                          String    @db.VarChar(100)
  prenom                       String    @db.VarChar(100)
  mail                         String    @unique(map: "mail_UNIQUE") @db.VarChar(255)
  mdp                          String    @db.VarChar(255)
  role                         Int?      @default(1)
  possede                      possede[]
  role_utilisateurs_roleTorole role?     @relation("utilisateurs_roleTorole", fields: [role], references: [id_role], onDelete: NoAction, onUpdate: NoAction, map: "role_utilisateur")

  @@index([role], map: "role_idx")
}

model role {
  id_role                              Int            @id @default(autoincrement())
  libelle                              String?        @db.VarChar(45)
  utilisateurs_utilisateurs_roleTorole utilisateurs[] @relation("utilisateurs_roleTorole")
}

model invitations {
  id_invitation Int       @id @default(autoincrement())
  email         String    @db.VarChar(255)
  date_creation DateTime? @default(now()) @db.DateTime(0)
  expiration    DateTime? @db.DateTime(0)
  fk_liste      Int
  listes        listes    @relation(fields: [fk_liste], references: [id_liste], onDelete: Cascade, onUpdate: NoAction, map: "liste")

  @@index([fk_liste], map: "liste_idx")
}
